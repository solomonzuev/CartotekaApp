//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CartotekaApp.Models
{
    using CartotekaApp.Domain;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public partial class Book
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Book()
        {
            this.Orders = new HashSet<Order>();
            this.Authors = new HashSet<Author>();
            this.Groups = new HashSet<Group>();
            this.Keywords = new HashSet<Keyword>();
        }

        public int Id { get; set; }
        public string BookName { get; set; }
        public string Otdel { get; set; }
        public int CategoryId { get; set; }
        public string BookDesc { get; set; }
    
        public virtual Category Category { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Order> Orders { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Author> Authors { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Group> Groups { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Keyword> Keywords { get; set; }

        public string AuthorsText => string.Join(", ", Authors.Select(a => a.FullName));
        public string FullName
        {
            get
            {
                var sb = new StringBuilder();

                // Добавляем первых двух авторов (при наличии)
                var firstAuthors = string.Join(", ", Authors.Take(2).Select(a => a.FullName));
                sb.Append(firstAuthors);
                sb.Append(" ");

                // Добавляем остальных авторов (при наличии) и название
                if (Authors.Count > 2)
                {
                    var allAuthors = string.Join(", ", Authors.Select(a => a.FullName));

                    sb.Append("и др. ");
                    sb.Append(BookName);
                    sb.Append(" / ");
                    sb.Append(allAuthors);
                }
                else
                {
                    sb.Append(BookName);
                }


                if (sb[sb.Length - 1] != '.')
                {
                    sb.Append('.');
                }

                // Добавляем описание книги (при наличии)
                if (BookDesc != null)
                {
                    sb.Append(" - ");
                    sb.Append(BookDesc);
                }

                return sb.ToString();
            }
        }

        public string GroupsText => string.Join(", ", Groups.Select(g => g.GroupName));
        public string KeywordsText => string.Join(", ", Keywords.Select(g => g.Keyword1));
    }
}
